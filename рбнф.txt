labelpoint = label , ";";
gotolabel = "GOTO", ident, ";";
program_name = ident;
value_type = "INTEGER32_t", ident, { "," , ident };
declaration_ident = ident;
other_declaration = ",", ident;
declaration = value_type, declaration_ident, { other_declaration };

operation_not = "NOT", inseparable_expression;
and_action = "AND", inseparable_expression;
or_action = "OR", high_prioryty_expression;
equal_action = "=", middle_prioryty_expression;
not_equal_action = "<>", middle_prioryty_expression;
less_or_equal_action = "<", middle_prioryty_expression;
greater_or_equal_action = ">", middle_prioryty_expression;
add_action = "+", high_prioryty_expression;
sub_action = "-", high_prioryty_expression;
mul_action = "*", inseparable_expression;
div_action = "/", inseparable_expression;
mod_action = "MOD", inseparable_expression;

unary_operation = operation_not;
inseparable_expression = group_expression | unary_operation | ident_read | value_read;
high_prioryty_left_expression = group_expression | unary_operation | ident_read | value_read;
high_prioryty_action = mul_action | div_action | mod_action | and_action;
high_prioryty_expression = high_prioryty_left_expression, { high_prioryty_action };

middle_prioryty_left_expression = high_prioryty_expression | group_expression | unary_operation | ident_read | value_read;
middle_prioryty_action = add_action | sub_action | or_action;
middle_prioryty_expression = middle_prioryty_left_expression, { middle_prioryty_action };

low_prioryty_left_expression = middle_prioryty_expression | high_prioryty_expression | group_expression | unary_operation | ident_read | value_read;
low_prioryty_action = less_or_equal_action | greater_or_equal_action | equal_action | not_equal_action;
low_prioryty_expression = low_prioryty_left_expression, { low_prioryty_action };

group_expression = "(", low_prioryty_expression, ")";
bind = ident_write, "<==", low_prioryty_expression;
if_expression = low_prioryty_expression;
body_for_true = "Then", { statement }, ";";
body_for_false = "Else", { statement }, ";";

cycle_begin_expression = low_prioryty_expression;
cycle_counter = ident;
cycle_counter_last_value = value;
cycle_body = "Do", statement, { statement };

forto_cycle = "FOR", cycle_begin_expression, "<==", cycle_counter, "TO", cycle_counter_last_value, cycle_body, ";";
while_cycle_head_expression = low_prioryty_expression;
while_cycle = "While", while_cycle_head_expression, { statement }, ";";

tokenCONTINUE = "Continue";
tokenWHILE = "WHILE";
tokenEXIT = "Exit";
continue_while = tokenCONTINUE, tokenWHILE;
exit_while = tokenEXIT, tokenWHILE;

statement_in_while_body = statement | continue_while | exit_while;

repeat_until_cycle_cond = low_prioryty_expression;
repeat_until_cycle = "REPEAT", { statement }, "UNTIL", repeat_until_cycle_cond;

input = "INPUT", "(", ident_write, ")";
output = "OUTPUT", "(", low_prioryty_expression, ")";
statement = recursive_descent_end_point | bind | cond_block | forto_cycle | while_cycle | repeat_until_cycle | labelpoint | gotolabel | input | output;

program = "MainProgram", "Data", [ declaration ], ";", "Start", { statement }, "End";

digit = digit_0 | digit_1 | digit_2 | digit_3 | digit_4 | digit_5 | digit_6 | digit_7 | digit_8 | digit_9;
non_zero_digit = digit_1 | digit_2 | digit_3 | digit_4 | digit_5 | digit_6 | digit_7 | digit_8 | digit_9;
unsigned_value = (non_zero_digit, { digit } | "0");
value = [ sign ], unsigned_value;

letter_in_lower_case = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";
letter_in_upper_case = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";
ident = "_" , letter_in_upper_case , letter_in_lower_case , letter_in_lower_case , letter_in_lower_case , letter_in_lower_case , letter_in_lower_case , letter_in_lower_case;
label = letter_in_lower_case , { letter_in_lower_case };

sign = sign_plus | sign_minus;
sign_plus = "+";
sign_minus = "-";

digit_0 = "0";
digit_1 = "1";
digit_2 = "2";
digit_3 = "3";
digit_4 = "4";
digit_5 = "5";
digit_6 = "6";
digit_7 = "7";
digit_8 = "8";
digit_9 = "9";
